# .PHONY: all clean

ifeq ($(DEBUG),true)
# -g是生成调试信息，GNU调试器可以利用该信息
CC - gcc
VERSION = debug
else
CC - gcc
VERSION = release
endif

# CC = gcc

# $(wildcard *.c)表示扫描当前目录下所有.c文件
SRCS = $(wildcard *.c)

# OBJS = nginx.o ngx_conf.o 这么一个一个增加.o太麻烦,下面使用另一种写法，
# 把字符串中的.c替换为.o
OBJS = $(SRCS:.c=.o)

# 把字符串中的.c替换为.d
DEPS = $(SRCS:.c=.d)

# 可以指定BIN文件夹的位置
BIN := $(addprefix $(BUILD_ROOT)/,$(BIN))

# 定义存放obj文件的目录，目录统一到一个位置才方便后续链接，不然指到各个子目录里去，不好链接
# 注意下面这个字符串，末尾不要有空格等，否者会爆语法错
LINK_OBJ_DIR = $(BUILD_ROOT)/app/link_obj
DEP_DIR = $(BUILD_ROOT)/app/dep

# -p 是递归创建目录，没有就创建，有就不要创建
$(shell mkdir -p $(LINK_OBJ_DIR))
$(shell mkdir -p $(DEP_DIR)/,$(DEPS))

# 找到目录中所有的.o文件（编译出来的）
LINK_ONJ = $(wildcard $(LINK_OBJ_DIR)/*.o)
# 因为构建依赖关系时app目录下这个.o还没构建出来，所以LINK_OBJ是缺少这个.o的，我们要把这个.o文件加进来
LINK_OBJ += $(OBJS)


# -------------------------------------------------------------------------------------------
# make找第一个目标开始执行[每个目标（就是我们要生成的东西）]，其实都是定义一种依赖关系，目标存储格式为
# 目标：目标依赖【可以省略】
# 		要执行的命令【可以省略】
# 如下这行是脚本开始执行的入口，执行就找到依赖项$(BIN)去执行了，同时，这里也依赖了$(DEPS)，这样就会生成很多的.d文件了
# make会去找整个文件中冒号前面和后大闽
all:$(DEPS) $(OBJS) $(BIN)



# 这里是诸多.d文件被包含进来，每个.d文件里都记录着一个.o文件所依赖哪些.c和.h文件。内容诸如 nginx.o: niginx.c ngx_func.h
# 我们做这个的最终目的说白就是：即便.h文件被修改了，也要让make重新编译我们的工程，否者，你修改了.h，make不会重新编译，那是不行的
# 有必要先判断这些文件是否存在，不然make可能会报一些.d文件找不到的错
ifneq ("$(wildcard $(DEPS))","")	# 如果不为空，$(wildcard)是函数【获取匹配模式文件名】，这里 用于比较是否为空""
include $(DEPS)
endif

# ------------------------------------------------------------------------------------------------------------------
# gcc -o 是生成可执行文件
	$(CC) -o $@ $^

# -----------------------------------------------------------------------------------------------------------------


# -----------------------------------------------------------------------------------------------------------------
# %.o:%.c
$(LINK_OBJ_DIR)/%.o:%.c
# gcc -c 是生成 .o目标文件 -I 可以指定头文件的路径
# 如下不排除有其他字符串，所以从其中专门把.c文件过滤出来
# $(CC) -o $@ -c $^
	$(CC) -I$(INCLUDE_PATH) -o $@ -c $(filter %.c,$^)
# -----------------------------------------------------------------------------------------------------------------



# -----------------------------------------------------------------------------------------------------------------
# 我们现在希望每当修改一个.h文件时，也能够让make自动重新编译我们的项目，所以，我们需要指明让.o文件依赖于.h文件
# 那一个.o文件依赖哪些.h文件，我们可以使用 gcc -MM c程序文件名 来获得这些依赖信息并重定向保存到.d文件中
# .d文件中的内容可能形如 : nginx.o: nginx.c ngx_func.h
# $.d:%.c
$(DEP_DIR)/%.d:%.c
# gcc -MM $^ > $@
# .d文件中的内容形如： nginx.o：nginx.c ngx_func.h ../signal/ngx_signal.h 但是现在的问题在于：我们的.o文件以及放到了专门的目录、
# 所以我们要正确指明.o文件路径，这样，对应的.h,.c修改后才能发现，这里需要用到sed文本处理工具和一些正则表达式语法
# gcc -MM $^ | sed 's,\(.*\)\.o[ :]*,$(LINK_OBJ_DIR)/\1.O:,G' > $@
# echo 中 -n表示后续追加不换行
	echo -n $(LINK_OBJ_DIR)/ > $@
# gcc -MM $^ | sed 's/^/$(LINK_OBJ_DIR)&/g' > $@
# >> 表示追加
	gcc -I$(INCLUDE_PATH) -MM $^ >> $@

# 上行处理之后，.d文件中的内容就应该如： /mnt/hgfs/nginxWeb/nginx/app/link_obj/nginx.o: nginx.c ngx_func.h ../signal/ngx_signal.h

# --------------------------------------------------------------------------------------------------------------------------




# --------------------------------------------------------------------------------------------------------------------------
# clean:
# rm 的参数-f 是不提示强制删除
# 可能gcc 会产生,gch这个优化编译速度文件
# 	rm -f $(BIN) $(OBJS) $(DEPS) *.gch
# --------------------------------------------------------------------------------------------------------------------------
